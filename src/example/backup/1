import _ from "lodash";
import axios from "axios";
import React, { Component } from "react";
import { Search, Grid, Header, Segment, Label } from "semantic-ui-react";

let source = [
  {
    "title": "Commencement"
  },
  {
    "title": "Recitals"
  },
  {
    "title": "Definitions"
  }
]

const resultRenderer = ({ title }) => (
  <span key="title">
    {title}
  </span>
);

const initialState = {
  isLoading: false,
  results: source,
  value: "",
  clauses: [],

};

export default class SearchExampleStandard extends Component {
  state = initialState;

  handleResultSelect = (e, { result }) =>
    this.setState({ value: result.title });

  handleSearchChange = (e, { value }) => {
    this.setState({ isLoading: true, value });

    setTimeout(() => {
      if (this.state.value.length < 1) return this.setState(initialState);

      const re = new RegExp(_.escapeRegExp(this.state.value), "i");
      const isMatch = result => re.test(result.title);

      this.setState({
        isLoading: false,
        results: _.filter(source, isMatch)
      });
    }, 300);
  };

  componentDidMount() {
    axios
      .get("https://my-json-server.typicode.com/lukaszbrk/clauses/db")
      .then(res => {
        function add_title(clause_name) {
          console.log(clause_name);
          return { title: clause_name };
        }
        this.setState(
          { clauses: Object.keys(res.data.Clauses).map(add_title) }
        );
      })
      .catch(err => console.log(err));
  }

  render() {
    const { isLoading, value, results } = this.state;
    

    return (
      <Grid>
        <Grid.Column width={6}>
          
          <Search
            defaultOpen={true}
            loading={isLoading}
            onResultSelect={this.handleResultSelect}
            onSearchChange={_.debounce(this.handleSearchChange, 500, {
              leading: true
            })}
            results={results}
            value={value}
            resultRenderer={resultRenderer}
            {...this.props}
          />
        </Grid.Column>
        <Grid.Column width={10}>
          <Segment>
            <Header>State</Header>
            <pre style={{ overflowX: "auto" }}>
              {JSON.stringify(this.state, null, 2)}
            </pre>
            <Header>Options</Header>
            <pre style={{ overflowX: "auto" }}>
              {JSON.stringify(source, null, 2)}
            </pre>
          </Segment>
        </Grid.Column>
      </Grid>
    );
  }
}
